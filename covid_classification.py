# -*- coding: utf-8 -*-
"""Final_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/181BGWKxZHHWQ1WsnVaBzMMa2EwyTZrVJ
"""

# load all packages here
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import SpectralClustering, KMeans
from sklearn.preprocessing import StandardScaler, normalize 
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, silhouette_score

# Data Loading, Preprocessing, and Preparation


data = pd.read_csv("final_data.csv")

# note: going to drop null values later on

# need to remove the commas from COVID-19 Deaths
data = data.replace(',','', regex=True)
# and convert strings to numbers 
data['COVID-19 Deaths'] = pd.to_numeric(data['COVID-19 Deaths'])

print(data.columns)

data = data.drop(columns = ['Data As Of', 'Start Date', 'End Date', 'Group', 'Year', 'Month', 
                           'State', 'Condition', 'ICD10_codes', 'Flag'])
data = data.dropna()

data = data.rename(columns={ 'Condition Group':'condition_group','Age Group':'age_group', 
                    'COVID-19 Deaths':'COVID-19 Deaths'})

# SETTING UP DATA FOR CONDITION GROUP ALGORITHMS

print(data['condition_group'].unique())

# getting variable we want to use to predict label, num of deaths

deaths = pd.DataFrame(data['COVID-19 Deaths'])

# doing 60/40 on training and testing data to begin with because data set is kind of small
# can tweak this later and see if it helps improve classification

# RESPIRATORY
# labels
respiratory = pd.DataFrame(data['condition_group'])
respiratory.condition_group[respiratory.condition_group == "Respiratory diseases"] = 1 # binary label 1
respiratory.condition_group[respiratory.condition_group == "Circulatory diseases"] = 0
respiratory.condition_group[respiratory.condition_group == "Sepsis"] = 0
respiratory.condition_group[respiratory.condition_group == "Malignant neoplasms"] = 0
respiratory.condition_group[respiratory.condition_group == "Diabetes"] = 0
respiratory.condition_group[respiratory.condition_group == "Obesity"] = 0
respiratory.condition_group[respiratory.condition_group == "Alzheimer disease"] = 0
respiratory.condition_group[respiratory.condition_group == "Vascular and unspecified dementia"] = 0
respiratory.condition_group[respiratory.condition_group == "Renal failure"] = 0
respiratory.condition_group[respiratory.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
respiratory.condition_group[respiratory.condition_group == "All other conditions and causes (residual)"] = 0
respiratory.condition_group[respiratory.condition_group == "COVID-19"] = 0
# make into an array of type int
respiratory = np.array(respiratory)
respiratory = respiratory.astype('int')
# splitting data
respiratory_train, respiratory_test, respiratory_labels_train, respiratory_labels_test = train_test_split(
    deaths, respiratory, test_size=0.4, random_state=0
)

# CIRCULATORY
# labels
circulatory = pd.DataFrame(data['condition_group'])
circulatory.condition_group[circulatory.condition_group == "Respiratory diseases"] = 0
circulatory.condition_group[circulatory.condition_group == "Circulatory diseases"] = 1 # binary label 1
circulatory.condition_group[circulatory.condition_group == "Sepsis"] = 0
circulatory.condition_group[circulatory.condition_group == "Malignant neoplasms"] = 0
circulatory.condition_group[circulatory.condition_group == "Diabetes"] = 0
circulatory.condition_group[circulatory.condition_group == "Obesity"] = 0
circulatory.condition_group[circulatory.condition_group == "Alzheimer disease"] = 0
circulatory.condition_group[circulatory.condition_group == "Vascular and unspecified dementia"] = 0
circulatory.condition_group[circulatory.condition_group == "Renal failure"] = 0
circulatory.condition_group[circulatory.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
circulatory.condition_group[circulatory.condition_group == "All other conditions and causes (residual)"] = 0
circulatory.condition_group[circulatory.condition_group == "COVID-19"] = 0
# make into an array of type int
circulatory = np.array(circulatory)
circulatory = circulatory.astype('int')
# splitting data
circulatory_train, circulatory_test, circulatory_labels_train, circulatory_labels_test = train_test_split(
    deaths, circulatory, test_size=0.4, random_state=0
)

# SEPSIS
# labels
sepsis = pd.DataFrame(data['condition_group'])
sepsis.condition_group[sepsis.condition_group == "Respiratory diseases"] = 0
sepsis.condition_group[sepsis.condition_group == "Circulatory diseases"] = 0
sepsis.condition_group[sepsis.condition_group == "Sepsis"] = 1 # binary label 1
sepsis.condition_group[sepsis.condition_group == "Malignant neoplasms"] = 0
sepsis.condition_group[sepsis.condition_group == "Diabetes"] = 0
sepsis.condition_group[sepsis.condition_group == "Obesity"] = 0
sepsis.condition_group[sepsis.condition_group == "Alzheimer disease"] = 0
sepsis.condition_group[sepsis.condition_group == "Vascular and unspecified dementia"] = 0
sepsis.condition_group[sepsis.condition_group == "Renal failure"] = 0
sepsis.condition_group[sepsis.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
sepsis.condition_group[sepsis.condition_group == "All other conditions and causes (residual)"] = 0
sepsis.condition_group[sepsis.condition_group == "COVID-19"] = 0
# make into an array of type int
sepsis = np.array(sepsis)
sepsis = sepsis.astype('int')
# splitting data
sepsis_train, sepsis_test, sepsis_labels_train, sepsis_labels_test = train_test_split(
    deaths, sepsis, test_size=0.4, random_state=0
)

# MALIGNANT NEOPLASMS
# labels
neoplasms = pd.DataFrame(data['condition_group'])
neoplasms.condition_group[neoplasms.condition_group == "Respiratory diseases"] = 0
neoplasms.condition_group[neoplasms.condition_group == "Circulatory diseases"] = 0
neoplasms.condition_group[neoplasms.condition_group == "Sepsis"] = 0
neoplasms.condition_group[neoplasms.condition_group == "Malignant neoplasms"] = 1 # binary label 1
neoplasms.condition_group[neoplasms.condition_group == "Diabetes"] = 0
neoplasms.condition_group[neoplasms.condition_group == "Obesity"] = 0
neoplasms.condition_group[neoplasms.condition_group == "Alzheimer disease"] = 0
neoplasms.condition_group[neoplasms.condition_group == "Vascular and unspecified dementia"] = 0
neoplasms.condition_group[neoplasms.condition_group == "Renal failure"] = 0
neoplasms.condition_group[neoplasms.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
neoplasms.condition_group[neoplasms.condition_group == "All other conditions and causes (residual)"] = 0
neoplasms.condition_group[neoplasms.condition_group == "COVID-19"] = 0
# make into an array of type int
neoplasms = np.array(neoplasms)
neoplasms = neoplasms.astype('int')
# splitting data
neoplasms_train, neoplasms_test, neoplasms_labels_train, neoplasms_labels_test = train_test_split(
    deaths, neoplasms, test_size=0.4, random_state=0
)

# DIABETES
# labels
diabetes = pd.DataFrame(data['condition_group'])
diabetes.condition_group[diabetes.condition_group == "Respiratory diseases"] = 0
diabetes.condition_group[diabetes.condition_group == "Circulatory diseases"] = 0
diabetes.condition_group[diabetes.condition_group == "Sepsis"] = 0
diabetes.condition_group[diabetes.condition_group == "Malignant neoplasms"] = 0
diabetes.condition_group[diabetes.condition_group == "Diabetes"] = 1 # binary label 1
diabetes.condition_group[diabetes.condition_group == "Obesity"] = 0
diabetes.condition_group[diabetes.condition_group == "Alzheimer disease"] = 0
diabetes.condition_group[diabetes.condition_group == "Vascular and unspecified dementia"] = 0
diabetes.condition_group[diabetes.condition_group == "Renal failure"] = 0
diabetes.condition_group[diabetes.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
diabetes.condition_group[diabetes.condition_group == "All other conditions and causes (residual)"] = 0
diabetes.condition_group[diabetes.condition_group == "COVID-19"] = 0
# make into an array of type int
diabetes = np.array(diabetes)
diabetes = diabetes.astype('int')
# splitting data
diabetes_train, diabetes_test, diabetes_labels_train, diabetes_labels_test = train_test_split(
    deaths, diabetes, test_size=0.4, random_state=0
)

# OBESITY
# labels
obesity = pd.DataFrame(data['condition_group'])
obesity.condition_group[obesity.condition_group == "Respiratory diseases"] = 0
obesity.condition_group[obesity.condition_group == "Circulatory diseases"] = 0
obesity.condition_group[obesity.condition_group == "Sepsis"] = 0
obesity.condition_group[obesity.condition_group == "Malignant neoplasms"] = 0
obesity.condition_group[obesity.condition_group == "Diabetes"] = 0
obesity.condition_group[obesity.condition_group == "Obesity"] = 1 # binary label 1
obesity.condition_group[obesity.condition_group == "Alzheimer disease"] = 0
obesity.condition_group[obesity.condition_group == "Vascular and unspecified dementia"] = 0
obesity.condition_group[obesity.condition_group == "Renal failure"] = 0
obesity.condition_group[obesity.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
obesity.condition_group[obesity.condition_group == "All other conditions and causes (residual)"] = 0
obesity.condition_group[obesity.condition_group == "COVID-19"] = 0
# make into an array of type int
obesity = np.array(obesity)
obesity = obesity.astype('int')
# splitting data
obesity_train, obesity_test, obesity_labels_train, obesity_labels_test = train_test_split(
    deaths, obesity, test_size=0.4, random_state=0
)

# ALZHEIMER DISEASE
# labels
alzheimer = pd.DataFrame(data['condition_group'])
alzheimer.condition_group[alzheimer.condition_group == "Respiratory diseases"] = 0
alzheimer.condition_group[alzheimer.condition_group == "Circulatory diseases"] = 0
alzheimer.condition_group[alzheimer.condition_group == "Sepsis"] = 0
alzheimer.condition_group[alzheimer.condition_group == "Malignant neoplasms"] = 0
alzheimer.condition_group[alzheimer.condition_group == "Diabetes"] = 0
alzheimer.condition_group[alzheimer.condition_group == "Obesity"] = 0
alzheimer.condition_group[alzheimer.condition_group == "Alzheimer disease"] = 1 # binary label 1
alzheimer.condition_group[alzheimer.condition_group == "Vascular and unspecified dementia"] = 0
alzheimer.condition_group[alzheimer.condition_group == "Renal failure"] = 0
alzheimer.condition_group[alzheimer.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
alzheimer.condition_group[alzheimer.condition_group == "All other conditions and causes (residual)"] = 0
alzheimer.condition_group[alzheimer.condition_group == "COVID-19"] = 0
# make into an array of type int
alzheimer = np.array(alzheimer)
alzheimer = alzheimer.astype('int')
# splitting data
alzheimer_train, alzheimer_test, alzheimer_labels_train, alzheimer_labels_test = train_test_split(
    deaths, alzheimer, test_size=0.4, random_state=0
)

# VASCULAR/DEMENTIA
# labels
vascular = pd.DataFrame(data['condition_group'])
vascular.condition_group[vascular.condition_group == "Respiratory diseases"] = 0
vascular.condition_group[vascular.condition_group == "Circulatory diseases"] = 0
vascular.condition_group[vascular.condition_group == "Sepsis"] = 0
vascular.condition_group[vascular.condition_group == "Malignant neoplasms"] = 0
vascular.condition_group[vascular.condition_group == "Diabetes"] = 0
vascular.condition_group[vascular.condition_group == "Obesity"] = 0
vascular.condition_group[vascular.condition_group == "Alzheimer disease"] = 0
vascular.condition_group[vascular.condition_group == "Vascular and unspecified dementia"] = 1 # binary label 1
vascular.condition_group[vascular.condition_group == "Renal failure"] = 0
vascular.condition_group[vascular.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
vascular.condition_group[vascular.condition_group == "All other conditions and causes (residual)"] = 0
vascular.condition_group[vascular.condition_group == "COVID-19"] = 0
# make into an array of type int
vascular = np.array(vascular)
vascular = vascular.astype('int')
# splitting data
vascular_train, vascular_test, vascular_labels_train, vascular_labels_test = train_test_split(
    deaths, vascular, test_size=0.4, random_state=0
)

# RENAL FAILURE
# labels
renal = pd.DataFrame(data['condition_group'])
renal.condition_group[renal.condition_group == "Respiratory diseases"] = 0
renal.condition_group[renal.condition_group == "Circulatory diseases"] = 0
renal.condition_group[renal.condition_group == "Sepsis"] = 0
renal.condition_group[renal.condition_group == "Malignant neoplasms"] = 0
renal.condition_group[renal.condition_group == "Diabetes"] = 0
renal.condition_group[renal.condition_group == "Obesity"] = 0
renal.condition_group[renal.condition_group == "Alzheimer disease"] = 0
renal.condition_group[renal.condition_group == "Vascular and unspecified dementia"] = 0
renal.condition_group[renal.condition_group == "Renal failure"] = 1 # binary label 1
renal.condition_group[renal.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
renal.condition_group[renal.condition_group == "All other conditions and causes (residual)"] = 0
renal.condition_group[renal.condition_group == "COVID-19"] = 0
# make into an array of type int
renal = np.array(renal)
renal = renal.astype('int')
# splitting data
renal_train, renal_test, renal_labels_train, renal_labels_test = train_test_split(
    deaths, renal, test_size=0.4, random_state=0
)

# OTHER ADVERSE EVENTS
# labels
other = pd.DataFrame(data['condition_group'])
other.condition_group[other.condition_group == "Respiratory diseases"] = 0
other.condition_group[other.condition_group == "Circulatory diseases"] = 0
other.condition_group[other.condition_group == "Sepsis"] = 0
other.condition_group[other.condition_group == "Malignant neoplasms"] = 0
other.condition_group[other.condition_group == "Diabetes"] = 0
other.condition_group[other.condition_group == "Obesity"] = 0
other.condition_group[other.condition_group == "Alzheimer disease"] = 0
other.condition_group[other.condition_group == "Vascular and unspecified dementia"] = 0
other.condition_group[other.condition_group == "Renal failure"] = 0
other.condition_group[other.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 1 # binary label 1
other.condition_group[other.condition_group == "All other conditions and causes (residual)"] = 0
other.condition_group[other.condition_group == "COVID-19"] = 0
# make into an array of type int
other = np.array(other)
other = other.astype('int')
# splitting data
other_train, other_test, other_labels_train, other_labels_test = train_test_split(
    deaths, other, test_size=0.4, random_state=0
)

# RESIDUAL
# labels
residual = pd.DataFrame(data['condition_group'])
residual.condition_group[residual.condition_group == "Respiratory diseases"] = 0
residual.condition_group[residual.condition_group == "Circulatory diseases"] = 0
residual.condition_group[residual.condition_group == "Sepsis"] = 0
residual.condition_group[residual.condition_group == "Malignant neoplasms"] = 0
residual.condition_group[residual.condition_group == "Diabetes"] = 0
residual.condition_group[residual.condition_group == "Obesity"] = 0
residual.condition_group[residual.condition_group == "Alzheimer disease"] = 0
residual.condition_group[residual.condition_group == "Vascular and unspecified dementia"] = 0
residual.condition_group[residual.condition_group == "Renal failure"] = 0
residual.condition_group[residual.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
residual.condition_group[residual.condition_group == "All other conditions and causes (residual)"] = 1 # binary label 1
residual.condition_group[residual.condition_group == "COVID-19"] = 0
# make into an array of type int
residual = np.array(residual)
residual = residual.astype('int')
# splitting data
residual_train, residual_test, residual_labels_train, residual_labels_test = train_test_split(
    deaths, residual, test_size=0.4, random_state=0
)

# COVID
# labels
covid = pd.DataFrame(data['condition_group'])
covid.condition_group[covid.condition_group == "Respiratory diseases"] = 0
covid.condition_group[covid.condition_group == "Circulatory diseases"] = 0
covid.condition_group[covid.condition_group == "Sepsis"] = 0
covid.condition_group[covid.condition_group == "Malignant neoplasms"] = 0
covid.condition_group[covid.condition_group == "Diabetes"] = 0
covid.condition_group[covid.condition_group == "Obesity"] = 0
covid.condition_group[covid.condition_group == "Alzheimer disease"] = 0
covid.condition_group[covid.condition_group == "Vascular and unspecified dementia"] = 0
covid.condition_group[covid.condition_group == "Renal failure"] = 0
covid.condition_group[covid.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
covid.condition_group[covid.condition_group == "All other conditions and causes (residual)"] = 0
covid.condition_group[covid.condition_group == "COVID-19"] = 1 # binary label 1
# make into an array of type int
covid = np.array(covid)
covid = covid.astype('int')
# splitting data
covid_train, covid_test, covid_labels_train, covid_labels_test = train_test_split(
    deaths, covid, test_size=0.4, random_state=0
)

# SETTING UP DATA FOR AGE GROUP ALGORITHMS

print(data['age_group'].unique())

#don't want to use 'not stated' and 'all ages'
index_not_stated = data[ data['age_group'] == 'Not stated' ].index
data.drop(index_not_stated, inplace=True)
index_all_ages = data[ data['age_group'] == 'All Ages' ].index
data.drop(index_all_ages, inplace=True)

print(data['age_group'].unique())

# getting variable we want to use to predict label, num of deaths

deaths_age_groups = pd.DataFrame(data['COVID-19 Deaths'])

# organizing age group data and getting test and training sets

# AGE GROUP 1: 0-24
# labels
age_group_1 = pd.DataFrame(data['age_group'])
age_group_1.age_group[age_group_1.age_group == '0-24'] = 1 # binary label 1
age_group_1.age_group[age_group_1.age_group == '25-34'] = 0
age_group_1.age_group[age_group_1.age_group == '35-44'] = 0
age_group_1.age_group[age_group_1.age_group == '45-54'] = 0
age_group_1.age_group[age_group_1.age_group == '55-64'] = 0
age_group_1.age_group[age_group_1.age_group == '65-74'] = 0
age_group_1.age_group[age_group_1.age_group == '75-84'] = 0
age_group_1.age_group[age_group_1.age_group == '85+'] = 0
# make into an array of type int
age_group_1 = np.array(age_group_1)
age_group_1 = age_group_1.astype('int')
# splitting data
age_group_1_train, age_group_1_test, age_group_1_labels_train, age_group_1_labels_test = train_test_split(
    deaths_age_groups, age_group_1, test_size=0.4, random_state=0
)

# AGE GROUP 2: 25-34
# labels
age_group_2 = pd.DataFrame(data['age_group'])
age_group_2.age_group[age_group_2.age_group == '0-24'] = 0
age_group_2.age_group[age_group_2.age_group == '25-34'] = 1 # binary label 1
age_group_2.age_group[age_group_2.age_group == '35-44'] = 0
age_group_2.age_group[age_group_2.age_group == '45-54'] = 0
age_group_2.age_group[age_group_2.age_group == '55-64'] = 0
age_group_2.age_group[age_group_2.age_group == '65-74'] = 0
age_group_2.age_group[age_group_2.age_group == '75-84'] = 0
age_group_2.age_group[age_group_2.age_group == '85+'] = 0
# make into an array of type int
age_group_2 = np.array(age_group_2)
age_group_2 = age_group_2.astype('int')
# splitting data
age_group_2_train, age_group_2_test, age_group_2_labels_train, age_group_2_labels_test = train_test_split(
    deaths_age_groups, age_group_2, test_size=0.4, random_state=0
)

# AGE GROUP 3: 35-44
# labels
age_group_3 = pd.DataFrame(data['age_group'])
age_group_3.age_group[age_group_3.age_group == '0-24'] = 0
age_group_3.age_group[age_group_3.age_group == '25-34'] = 0
age_group_3.age_group[age_group_3.age_group == '35-44'] = 1 # binary label 1
age_group_3.age_group[age_group_3.age_group == '45-54'] = 0
age_group_3.age_group[age_group_3.age_group == '55-64'] = 0
age_group_3.age_group[age_group_3.age_group == '65-74'] = 0
age_group_3.age_group[age_group_3.age_group == '75-84'] = 0
age_group_3.age_group[age_group_3.age_group == '85+'] = 0
# make into an array of type int
age_group_3 = np.array(age_group_3)
age_group_3 = age_group_3.astype('int')
# splitting data
age_group_3_train, age_group_3_test, age_group_3_labels_train, age_group_3_labels_test = train_test_split(
    deaths_age_groups, age_group_3, test_size=0.4, random_state=0
)

# AGE GROUP 4: 45-54
# labels
age_group_4 = pd.DataFrame(data['age_group'])
age_group_4.age_group[age_group_4.age_group == '0-24'] = 0
age_group_4.age_group[age_group_4.age_group == '25-34'] = 0
age_group_4.age_group[age_group_4.age_group == '35-44'] = 0
age_group_4.age_group[age_group_4.age_group == '45-54'] = 1 # binary label 1
age_group_4.age_group[age_group_4.age_group == '55-64'] = 0
age_group_4.age_group[age_group_4.age_group == '65-74'] = 0
age_group_4.age_group[age_group_4.age_group == '75-84'] = 0
age_group_4.age_group[age_group_4.age_group == '85+'] = 0
# make into an array of type int
age_group_4 = np.array(age_group_4)
age_group_4 = age_group_4.astype('int')
# splitting data
age_group_4_train, age_group_4_test, age_group_4_labels_train, age_group_4_labels_test = train_test_split(
    deaths_age_groups, age_group_4, test_size=0.4, random_state=0
)

# AGE GROUP 5: 55-64
# labels
age_group_5 = pd.DataFrame(data['age_group'])
age_group_5.age_group[age_group_5.age_group == '0-24'] = 0
age_group_5.age_group[age_group_5.age_group == '25-34'] = 0
age_group_5.age_group[age_group_5.age_group == '35-44'] = 0
age_group_5.age_group[age_group_5.age_group == '45-54'] = 0
age_group_5.age_group[age_group_5.age_group == '55-64'] = 1 # binary label 1
age_group_5.age_group[age_group_5.age_group == '65-74'] = 0
age_group_5.age_group[age_group_5.age_group == '75-84'] = 0
age_group_5.age_group[age_group_5.age_group == '85+'] = 0
# make into an array of type int
age_group_5 = np.array(age_group_5)
age_group_5 = age_group_5.astype('int')
# splitting data
age_group_5_train, age_group_5_test, age_group_5_labels_train, age_group_5_labels_test = train_test_split(
    deaths_age_groups, age_group_5, test_size=0.4, random_state=0
)

# AGE GROUP 6: 65-74
# labels
age_group_6 = pd.DataFrame(data['age_group'])
age_group_6.age_group[age_group_6.age_group == '0-24'] = 0
age_group_6.age_group[age_group_6.age_group == '25-34'] = 0
age_group_6.age_group[age_group_6.age_group == '35-44'] = 0
age_group_6.age_group[age_group_6.age_group == '45-54'] = 0
age_group_6.age_group[age_group_6.age_group == '55-64'] = 0
age_group_6.age_group[age_group_6.age_group == '65-74'] = 1 # binary label 1
age_group_6.age_group[age_group_6.age_group == '75-84'] = 0
age_group_6.age_group[age_group_6.age_group == '85+'] = 0
# make into an array of type int
age_group_6 = np.array(age_group_6)
age_group_6 = age_group_6.astype('int')
# splitting data
age_group_6_train, age_group_6_test, age_group_6_labels_train, age_group_6_labels_test = train_test_split(
    deaths_age_groups, age_group_6, test_size=0.4, random_state=0
)

# AGE GROUP 7: 75-84
# labels
age_group_7 = pd.DataFrame(data['age_group'])
age_group_7.age_group[age_group_7.age_group == '0-24'] = 0
age_group_7.age_group[age_group_7.age_group == '25-34'] = 0
age_group_7.age_group[age_group_7.age_group == '35-44'] = 0
age_group_7.age_group[age_group_7.age_group == '45-54'] = 0
age_group_7.age_group[age_group_7.age_group == '55-64'] = 0
age_group_7.age_group[age_group_7.age_group == '65-74'] = 0
age_group_7.age_group[age_group_7.age_group == '75-84'] = 1 # binary label 1
age_group_7.age_group[age_group_7.age_group == '85+'] = 0
# make into an array of type int
age_group_7 = np.array(age_group_7)
age_group_7 = age_group_7.astype('int')
# splitting data
age_group_7_train, age_group_7_test, age_group_7_labels_train, age_group_7_labels_test = train_test_split(
    deaths_age_groups, age_group_7, test_size=0.4, random_state=0
)

# AGE GROUP 8: 85+
# labels
age_group_8 = pd.DataFrame(data['age_group'])
age_group_8.age_group[age_group_8.age_group == '0-24'] = 0
age_group_8.age_group[age_group_8.age_group == '25-34'] = 0
age_group_8.age_group[age_group_8.age_group == '35-44'] = 0
age_group_8.age_group[age_group_8.age_group == '45-54'] = 0
age_group_8.age_group[age_group_8.age_group == '55-64'] = 0
age_group_8.age_group[age_group_8.age_group == '65-74'] = 0
age_group_8.age_group[age_group_8.age_group == '75-84'] = 0
age_group_8.age_group[age_group_8.age_group == '85+'] = 1 # binary label 1
# make into an array of type int
age_group_8 = np.array(age_group_8)
age_group_8 = age_group_8.astype('int')
# splitting data
age_group_8_train, age_group_8_test, age_group_8_labels_train, age_group_8_labels_test = train_test_split(
    deaths_age_groups, age_group_8, test_size=0.4, random_state=0
)

# Logistic Regression

# CONDITION GROUP 

respiratory_logreg = LogisticRegression().fit(respiratory_train, respiratory_labels_train)
r_predictions = respiratory_logreg.predict(respiratory_test)

circulatory_logreg = LogisticRegression().fit(circulatory_train, circulatory_labels_train)
c_predictions = circulatory_logreg.predict(circulatory_test)

sepsis_logreg = LogisticRegression().fit(sepsis_train, sepsis_labels_train)
s_predictions = sepsis_logreg.predict(sepsis_test)

neoplasms_logreg = LogisticRegression().fit(neoplasms_train, neoplasms_labels_train)
n_predictions = neoplasms_logreg.predict(neoplasms_test)

diabetes_logreg = LogisticRegression().fit(diabetes_train, diabetes_labels_train)
d_predictions = diabetes_logreg.predict(diabetes_test)

obesity_logreg = LogisticRegression().fit(obesity_train, obesity_labels_train)
o_predictions = obesity_logreg.predict(obesity_test)

alzheimer_logreg = LogisticRegression().fit(alzheimer_train, alzheimer_labels_train)
a_predictions = alzheimer_logreg.predict(alzheimer_test)

vascular_logreg = LogisticRegression().fit(vascular_train, vascular_labels_train)
v_predictions = vascular_logreg.predict(vascular_test)

renal_logreg = LogisticRegression().fit(renal_train, renal_labels_train)
re_predictions = renal_logreg.predict(renal_test)

other_logreg = LogisticRegression().fit(other_train, other_labels_train)
ot_predictions = other_logreg.predict(other_test)

residual_logreg = LogisticRegression().fit(residual_train, residual_labels_train)
res_predictions = residual_logreg.predict(residual_test)

covid_logreg = LogisticRegression().fit(covid_train, covid_labels_train)
c_predictions = covid_logreg.predict(covid_test)

print('Model Accuracy Score for Respiratory Conditions: ' 
      + str(accuracy_score(r_predictions, respiratory_labels_test)))
print('Model Accuracy Score for Circulatory Conditions: ' 
      + str(accuracy_score(c_predictions, circulatory_labels_test)))
print('Model Accuracy Score for Sepsis: ' 
      + str(accuracy_score(s_predictions, sepsis_labels_test)))
print('Model Accuracy Score for Malignant Neoplasms: ' 
      + str(accuracy_score(n_predictions, neoplasms_labels_test)))
print('Model Accuracy Score for Diabetes: ' 
      + str(accuracy_score(d_predictions, diabetes_labels_test)))
print('Model Accuracy Score for Obesity: ' 
      + str(accuracy_score(o_predictions, obesity_labels_test)))
print('Model Accuracy Score for Alzheimer: ' 
      + str(accuracy_score(a_predictions, alzheimer_labels_test)))
print('Model Accuracy Score for Vascular and Unspecified Dementia: ' 
      + str(accuracy_score(v_predictions, vascular_labels_test)))
print('Model Accuracy Score for Renal Failure: ' 
      + str(accuracy_score(re_predictions, renal_labels_test)))
print('Model Accuracy Score for Intentional and unintentional injury poisoning and other adverse events: ' 
      + str(accuracy_score(ot_predictions, other_labels_test)))
print('Model Accuracy Score for All other conditions and causes (residual): ' 
      + str(accuracy_score(res_predictions, residual_labels_test)))
print('Model Accuracy Score for COVID-19: ' 
      + str(accuracy_score(c_predictions, covid_labels_test)))

# AGE GROUP

age_group_1_logreg = LogisticRegression().fit(age_group_1_train, age_group_1_labels_train)
age_group_1_predictions = age_group_1_logreg.predict(age_group_1_test)

age_group_2_logreg = LogisticRegression().fit(age_group_2_train, age_group_2_labels_train)
age_group_2_predictions = age_group_2_logreg.predict(age_group_2_test)

age_group_3_logreg = LogisticRegression().fit(age_group_3_train, age_group_3_labels_train)
age_group_3_predictions = age_group_3_logreg.predict(age_group_3_test)

age_group_4_logreg = LogisticRegression().fit(age_group_4_train, age_group_4_labels_train)
age_group_4_predictions = age_group_4_logreg.predict(age_group_4_test)

age_group_5_logreg = LogisticRegression().fit(age_group_5_train, age_group_5_labels_train)
age_group_5_predictions = age_group_5_logreg.predict(age_group_5_test)

age_group_6_logreg = LogisticRegression().fit(age_group_6_train, age_group_6_labels_train)
age_group_6_predictions = age_group_6_logreg.predict(age_group_6_test)

age_group_7_logreg = LogisticRegression().fit(age_group_7_train, age_group_7_labels_train)
age_group_7_predictions = age_group_7_logreg.predict(age_group_7_test)

age_group_8_logreg = LogisticRegression().fit(age_group_8_train, age_group_8_labels_train)
age_group_8_predictions = age_group_8_logreg.predict(age_group_8_test)

print('Model Accuracy Score for Age Group 0-24: ' 
      + str(accuracy_score(age_group_1_predictions, age_group_1_labels_test)))
print('Model Accuracy Score for Age Group 25-34: ' 
      + str(accuracy_score(age_group_2_predictions, age_group_2_labels_test)))
print('Model Accuracy Score for Age Group 35-44: ' 
      + str(accuracy_score(age_group_3_predictions, age_group_3_labels_test)))
print('Model Accuracy Score for Age Group 45-54: ' 
      + str(accuracy_score(age_group_4_predictions, age_group_4_labels_test)))
print('Model Accuracy Score for Age Group 55-64: ' 
      + str(accuracy_score(age_group_5_predictions, age_group_5_labels_test)))
print('Model Accuracy Score for Age Group 65-74: ' 
      + str(accuracy_score(age_group_6_predictions, age_group_6_labels_test)))
print('Model Accuracy Score for Age Group 75-84: ' 
      + str(accuracy_score(age_group_7_predictions, age_group_7_labels_test)))
print('Model Accuracy Score for Age Group 85+: ' 
      + str(accuracy_score(age_group_8_predictions, age_group_8_labels_test)))

# Spectral Clustering



pd.unique(data['condition_group'])

resp = data[data['condition_group'] == 'Respiratory diseases']
circ = data[data['condition_group'] == 'Circulatory diseases']
sep = data[data['condition_group'] == 'Sepsis']
neo = data[data['condition_group'] == 'Malignant neoplasms']
dia = data[data['condition_group'] == 'Diabetes']
obe = data[data['condition_group'] == 'Obesity']
alz = data[data['condition_group'] == 'Alzheimer disease']
vas = data[data['condition_group'] == 'Vascular and unspecified dementia']
renal = data[data['condition_group'] == 'Renal failure']
intent = data[data['condition_group'] == 'Intentional and unintentional injury poisoning and other adverse events']
others = data[data['condition_group'] == 'All other conditions and causes (residual)']
covid = data[data['condition_group'] == 'COVID-19']

age_group_1 = data[data['age_group'] == '0-24']
age_group_2 = data[data['age_group'] == '25-34']
age_group_3 = data[data['age_group'] == '35-44']
age_group_4 = data[data['age_group'] == '45-54']
age_group_5 = data[data['age_group'] == '55-64']
age_group_6 = data[data['age_group'] == '65-74']
age_group_7 = data[data['age_group'] == '75-84']
age_group_8 = data[data['age_group'] == '85+']

def SpecClusterInfo(data_frame, title):
  lim = 10000
  data_frame.fillna(method='ffill', inplace=True)
  if (len(data_frame) > lim):
    data_frame = data_frame.sample(n=lim,random_state=1)
  #Scaling the values using integer columns
  sc = StandardScaler()
  data_frame = data_frame[['COVID-19 Deaths', 'Number of Mentions']]
  normalizedX = pd.DataFrame(normalize(sc.fit_transform(data_frame)))
  #Making the PCA Models
  pca = PCA(n_components = 2)
  principal = pd.DataFrame(pca.fit_transform(normalizedX))
  spec_rbf = SpectralClustering(n_clusters=2,affinity='rbf',random_state=0)
  spec_nn = SpectralClustering(n_clusters=2,affinity='nearest_neighbors',random_state=0)
  #This function plots the clusters using PCA models
  plt.scatter(principal[0], principal[1], c = spec_rbf.fit_predict(principal))
  plt.title(title)
  plt.show()
  #SCPlot(spec_nn, 'Clustering Plot Using Nearest Neighbor')
  labels_rbf = spec_rbf.fit_predict(principal)
  # labels_nn = spec_nn.fit_predict(principal)
  print(silhouette_score(data_frame, labels_rbf))

SpecClusterInfo(resp, 'Respiratory')
SpecClusterInfo(circ, 'Circular')
SpecClusterInfo(sep, 'Sepsis')
SpecClusterInfo(neo, 'Malignant Neoplasms')
SpecClusterInfo(dia, 'Diabetes')
SpecClusterInfo(obe, 'Obesity')
SpecClusterInfo(alz, 'Alzheimers Disease')
SpecClusterInfo(vas, 'Vascular and Unspecified Dementia')
SpecClusterInfo(renal, 'Renal Failure')
SpecClusterInfo(intent, 'Intentional/Unintentional Poisoning')
SpecClusterInfo(others, 'Other conditions')
SpecClusterInfo(covid, 'COVID-19')

"""Age Group"""

SpecClusterInfo(age_group_1, '0-24')
SpecClusterInfo(age_group_2, '25-34')
SpecClusterInfo(age_group_3, '35-44')
SpecClusterInfo(age_group_4, '45-54')
SpecClusterInfo(age_group_5, '55-64')
SpecClusterInfo(age_group_6, '65-74')
SpecClusterInfo(age_group_7, '75-84')
SpecClusterInfo(age_group_8, '85+')

# Support Vector Machine

from sklearn.svm import SVC 
from sklearn.metrics import classification_report, confusion_matrix

svc_model = SVC()

#Condition Group
respiratory_SVC = svc_model.fit(respiratory_train, respiratory_labels_train)

circulatory_SVC = svc_model.fit(circulatory_train, circulatory_labels_train)

sepsis_SVC = svc_model.fit(sepsis_train, sepsis_labels_train)

neoplasms_SVC = svc_model.fit(neoplasms_train, neoplasms_labels_train)

diabetes_SVC = svc_model.fit(diabetes_train, diabetes_labels_train)

obesity_SVC = svc_model.fit(obesity_train, obesity_labels_train)

alzheimer_SVC = svc_model.fit(alzheimer_train, alzheimer_labels_train)

vascular_SVC = svc_model.fit(vascular_train, vascular_labels_train)

renal_SVC = svc_model.fit(renal_train, renal_labels_train)

other_SVC = svc_model.fit(other_train, other_labels_train)

residual_SVC = svc_model.fit(residual_train, residual_labels_train)

covid_SVC = svc_model.fit(covid_train, covid_labels_train)

#PREDICTIONS
r_predictions_SVC = respiratory_SVC.predict(respiratory_test)

c_predictions_SVC = circulatory_SVC.predict(circulatory_test)

s_predictions_SVC = sepsis_SVC.predict(sepsis_test)

n_predictions_SVC = neoplasms_SVC.predict(neoplasms_test)

d_predictions_SVC = diabetes_SVC.predict(diabetes_test)

o_predictions_SVC = obesity_SVC.predict(obesity_test)

a_predictions_SVC = alzheimer_SVC.predict(alzheimer_test)

v_predictions_SVC = vascular_SVC.predict(vascular_test)

re_predictions_SVC = renal_SVC.predict(renal_test)

ot_predictions_SVC = other_SVC.predict(other_test)

res_predictions_SVC = residual_SVC.predict(residual_test)

c_predictions_SVC = covid_SVC.predict(covid_test)

print('Model Accuracy Score for Respiratory Conditions: ' 
      + str(accuracy_score(r_predictions_SVC, respiratory_labels_test)))
print('Model Accuracy Score for Circulatory Conditions: ' 
      + str(accuracy_score(c_predictions_SVC, circulatory_labels_test)))
print('Model Accuracy Score for Sepsis: ' 
      + str(accuracy_score(s_predictions_SVC, sepsis_labels_test)))
print('Model Accuracy Score for Malignant Neoplasms: ' 
      + str(accuracy_score(n_predictions_SVC, neoplasms_labels_test)))
print('Model Accuracy Score for Diabetes: ' 
      + str(accuracy_score(d_predictions_SVC, diabetes_labels_test)))
print('Model Accuracy Score for Obesity: ' 
      + str(accuracy_score(o_predictions_SVC, obesity_labels_test)))
print('Model Accuracy Score for Alzheimer: ' 
      + str(accuracy_score(a_predictions_SVC, alzheimer_labels_test)))
print('Model Accuracy Score for Vascular and Unspecified Dementia: ' 
      + str(accuracy_score(v_predictions_SVC, vascular_labels_test)))
print('Model Accuracy Score for Renal Failure: ' 
      + str(accuracy_score(re_predictions_SVC, renal_labels_test)))
print('Model Accuracy Score for Intentional and unintentional injury poisoning and other adverse events: ' 
      + str(accuracy_score(ot_predictions_SVC, other_labels_test)))
print('Model Accuracy Score for All other conditions and causes (residual): ' 
      + str(accuracy_score(res_predictions_SVC, residual_labels_test)))
print('Model Accuracy Score for COVID-19: ' 
      + str(accuracy_score(c_predictions_SVC, covid_labels_test)))

# AGE GROUP

age_group_1_SVC = svc_model.fit(age_group_1_train, age_group_1_labels_train)
age_group_1_predictions_SVC = age_group_1_SVC.predict(age_group_1_test)

age_group_2_SVC = svc_model.fit(age_group_2_train, age_group_2_labels_train)
age_group_2_predictions_SVC = age_group_2_SVC.predict(age_group_2_test)

age_group_3_SVC = svc_model.fit(age_group_3_train, age_group_3_labels_train)
age_group_3_predictions_SVC = age_group_3_SVC.predict(age_group_3_test)

age_group_4_SVC = svc_model.fit(age_group_4_train, age_group_4_labels_train)
age_group_4_predictions_SVC = age_group_4_SVC.predict(age_group_4_test)

age_group_5_SVC = svc_model.fit(age_group_5_train, age_group_5_labels_train)
age_group_5_predictions_SVC = age_group_5_SVC.predict(age_group_5_test)

age_group_6_SVC = svc_model.fit(age_group_6_train, age_group_6_labels_train)
age_group_6_predictions_SVC = age_group_6_SVC.predict(age_group_6_test)

age_group_7_SVC = svc_model.fit(age_group_7_train, age_group_7_labels_train)
age_group_7_predictions_SVC = age_group_7_SVC.predict(age_group_7_test)

age_group_8_SVC = svc_model.fit(age_group_8_train, age_group_8_labels_train)
age_group_8_predictions_SVC = age_group_8_SVC.predict(age_group_8_test)

print('Model Accuracy Score for Age Group 0-24: ' 
      + str(accuracy_score(age_group_1_predictions_SVC, age_group_1_labels_test)))
print('Model Accuracy Score for Age Group 25-34: ' 
      + str(accuracy_score(age_group_2_predictions_SVC, age_group_2_labels_test)))
print('Model Accuracy Score for Age Group 35-44: ' 
      + str(accuracy_score(age_group_3_predictions_SVC, age_group_3_labels_test)))
print('Model Accuracy Score for Age Group 45-54: ' 
      + str(accuracy_score(age_group_4_predictions_SVC, age_group_4_labels_test)))
print('Model Accuracy Score for Age Group 55-64: ' 
      + str(accuracy_score(age_group_5_predictions_SVC, age_group_5_labels_test)))
print('Model Accuracy Score for Age Group 65-74: ' 
      + str(accuracy_score(age_group_6_predictions_SVC, age_group_6_labels_test)))
print('Model Accuracy Score for Age Group 75-84: ' 
      + str(accuracy_score(age_group_7_predictions_SVC, age_group_7_labels_test)))
print('Model Accuracy Score for Age Group 85+: ' 
      + str(accuracy_score(age_group_8_predictions_SVC, age_group_8_labels_test)))

#Data Preprocessing and Decision Tree


# i renamed the csv final on my computer bc the name it came with was really long
data = pd.read_csv("final_data.csv")

# note: going to drop null values later on

# need to remove the commas from COVID-19 Deaths
data = data.replace(',','', regex=True)
# and convert strings to numbers 
data['COVID-19 Deaths'] = pd.to_numeric(data['COVID-19 Deaths'])

print(data.columns)

data = data.drop(columns = ['Group','Data As Of', 'Start Date', 'End Date', 'Year', 'Month', 'ICD10_codes', 'Flag'])
data = data.dropna()

cat_feats = ['State', 'Condition Group', 'Condition', 'Age Group', 'COVID-19 Deaths', 'Number of Mentions']

for cat_feature in cat_feats:
  print(data[cat_feature].unique())

data = data.rename(columns={ 'Condition Group':'condition_group','Age Group':'age_group', 
                    'COVID-19 Deaths':'COVID-19 Deaths'})

respiratory = pd.DataFrame(data['condition_group'])
respiratory.condition_group[respiratory.condition_group == "Respiratory diseases"] = 1 # binary label 1
respiratory.condition_group[respiratory.condition_group == "Circulatory diseases"] = 0
respiratory.condition_group[respiratory.condition_group == "Sepsis"] = 0
respiratory.condition_group[respiratory.condition_group == "Malignant neoplasms"] = 0
respiratory.condition_group[respiratory.condition_group == "Diabetes"] = 0
respiratory.condition_group[respiratory.condition_group == "Obesity"] = 0
respiratory.condition_group[respiratory.condition_group == "Alzheimer disease"] = 0
respiratory.condition_group[respiratory.condition_group == "Vascular and unspecified dementia"] = 0
respiratory.condition_group[respiratory.condition_group == "Renal failure"] = 0
respiratory.condition_group[respiratory.condition_group == "Intentional and unintentional injury poisoning and other adverse events"] = 0
respiratory.condition_group[respiratory.condition_group == "All other conditions and causes (residual)"] = 0
respiratory.condition_group[respiratory.condition_group == "COVID-19"] = 0

respiratory.head(5)

dataA = data[['COVID-19 Deaths', 'Number of Mentions']].copy()

dataA['Respiratory'] = respiratory

index_not_stated = data[ data['age_group'] == 'Not stated' ].index
data.drop(index_not_stated, inplace=True)
index_all_ages = data[ data['age_group'] == 'All Ages' ].index
data.drop(index_all_ages, inplace=True)

print(data['age_group'].unique())

age_group_1 = pd.DataFrame(data['age_group'])
age_group_1.age_group[age_group_1.age_group == '0-24'] = 24
age_group_1.age_group[age_group_1.age_group == '25-34'] = 30
age_group_1.age_group[age_group_1.age_group == '35-44'] = 40
age_group_1.age_group[age_group_1.age_group == '45-54'] = 50
age_group_1.age_group[age_group_1.age_group == '55-64'] = 60
age_group_1.age_group[age_group_1.age_group == '65-74'] = 70
age_group_1.age_group[age_group_1.age_group == '75-84'] = 80
age_group_1.age_group[age_group_1.age_group == '85+'] = 90

dataA['Age'] = age_group_1

dataA.dropna()

dataA = dataA[['COVID-19 Deaths', 'Number of Mentions', 'Age']]

dataA['Age'] = dataA['Age'].fillna(0)

X = dataA.to_numpy()
X = X.astype('int')

Y = respiratory.to_numpy()
Y = Y.astype('int')

from sklearn.tree import DecisionTreeClassifier, export_graphviz, plot_tree
tree=DecisionTreeClassifier(max_depth=3)
tree.fit(X,Y)

plt.figure(figsize=(15,15))
plot_tree(tree,filled=True);









